#!/usr/bin/env python3

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time, sys, os, json

# url の指定

url = "https://www.deepl.com/ja/translator"

# セレクタの指定

# login_selector = "body > header > nav > div > div.dl_header_menu_v2__buttons > div.dl_header_menu_v2__login_button_simple > button"
login_xpath = "/html/body/header/nav/div/div[3]/div[1]/button"
input_selector = "#panelTranslateText > div.lmt__sides_container > section.lmt__side_container.lmt__side_container--source > div.lmt__textarea_container > div.lmt__inner_textarea_container > textarea"
output_selector = "#target-dummydiv"

# 上限文字数

maxchar = 5000


# 関数

def alignParagraph(txt, index):
    for (i, sep) in enumerate(index):
        if (i == 0):
            rslt = " ".join(txt[:sep])
            if rslt:
                yield rslt
        else:
            rslt = " ".join(txt[index[i - 1] + 1 : sep])
            if rslt:
                yield rslt
            if (i + 1 == len(index)):
                rslt = " ".join(txt[sep + 1 :])
                if rslt:
                    yield rslt

def splitParagraph(txt, n):
    for strings in txt:
        # パラグラフが文字数の上限を上回る場合
        if (len(strings) > n):

            # パラグラフを "." で分割
            strIter = (x.strip() for x in strings.split(".") if x.strip())

            # 対象の初期化
            trg = ""

            # 以下、エラーが生じたら対象を出力
            try:
                while True:

                    # パラグラフから文をひとつ抽出
                    sentence = next(strIter)

                    # 対象が文字数上限を超過するまで対象に文を追加
                    while (len(trg) + len(sentence) + 1 < n):
                        trg = trg + " " + sentence + "."
                        sentence = next(strIter)

                    # 文字列の出力
                    if trg:
                        yield trg.strip()

                    # 対象の初期化
                    trg = sentence + "."

            except:

                # 対象が空文字でない場合のみ出力
                if trg:
                    yield trg.strip()

        # 上回らない場合
        else:
            yield strings

def doDeepl(txt, driver, url, input_selector, output_selector):
        try:

            # URL の取得
            driver.get(url)

            # 入力画面に文字を入力する
            driver.find_element_by_css_selector(input_selector).send_keys(txt)

            # 出力画面から訳を抽出する
            outputText = ""
            for i in range(10):

                # 翻訳を取得
                outputText = driver.find_element_by_css_selector(output_selector).get_attribute("textContent")

                # 取得できた場合はループを出る
                if outputText.strip():
                    break

                # 1 秒休止
                time.sleep(1)

            # 規定回数のループで翻訳を取得できなかった場合
            else:
                outputText = "`タイムアウトしました。`"

            # 出力
            return outputText

        except:

            # 失敗した場合
            return "`翻訳に失敗しました。`"

def alignDeepl(txt, max, url, input_selector, output_selector):

    # 空白の index の取得
    blankIndex = [i for (i, x) in enumerate(txt) if x == ""]

    # 改行を外す
    alignedTxt = alignParagraph(txt, blankIndex)

    # 挿入文字列の分割
    splitTxt = splitParagraph(alignedTxt, max)

    # ヘッドレスの設定
    options = Options()
    # options.add_argument("--headless")

    # deepl の適用
    with webdriver.Chrome(options = options) as driver:

        # Pro へのログイン
        try:

            # 設定ファイルの取得 (取得できない場合ログインしない)
            confPath = os.path.join(os.environ["HOME"], ".aligndeepl")
            with open(confPath, "r") as rf:
                conf = json.load(rf)

            # ログインの実行
            driver.get(url)
            # driver.find_element_by_css_selector(login_selector).click()
            driver.find_element_by_xpath(login_xpath).click()
            driver.find_element_by_name("login-email").send_keys(conf["id"])
            driver.find_element_by_name("login-password").send_keys(conf["password"])
            driver.find_element_by_name("login-email").submit()
            time.sleep(5)

        # 上のどこかでエラーがでた場合はそのまま次へ進む
        except:
            pass

        for trg in splitTxt:
            print("> " + trg + "\n")
            print(doDeepl(trg, driver, url, input_selector, output_selector) + "\n")
            print("- - -\n")


# 実行

if __name__ == "__main__":

    inputData = [x.strip() for x in sys.stdin.readlines()]
    alignDeepl(inputData, maxchar, url, input_selector, output_selector)
